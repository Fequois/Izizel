// Typescale
//
// Calculate and output headers based on values from a map (typescale).
//
// @notes
// Requires the modular-scale module by Sass. Uncomment the block below
// for a more basic but independent version. Also uncomment the scale in
// `settings/_typography.scss`.
// ----------------------------------------------------------------------------
@mixin headings($max-heading: 1, $min-heading: 6) {
    $number-of-headings: $min-heading - $max-heading + 1;

    @for $i from 1 through $number-of-headings {
        $heading: $number-of-headings - $i + $max-heading;

        h#{$heading} {
            $size: ms($i - 1);
            font-size: $size;
            margin-bottom: rem($size / $ms-ratio * 5);
        }
    }
}

// @mixin typescale($scale, $base, $measure) {
//     font-size: rem($scale);
//     margin-bottom: #{$measure / $scale * .5}rem; // base on modular scale
// }
//
// @mixin headings {
//     $base-font-size: strip-unit($base-font-size);
//
//     @each $name, $size in $iz-typescale {
//         #{$name} {
//             @include typescale($size, $base-font-size, $base-font-size * $base-line-height);
//         }
//     }
// }


// Media Queries
//
// Simplifies management of media queries in our CSS. Takes our content,
// eats a cookie and wraps it in a media query. Automagically.
// ----------------------------------------------------------------------------
@mixin mq($name) {
    // If the key exists in the map
    @if map-has-key($iz-breakpoints, $name) {
        // Prints a media query based on the value
        @media #{inspect(map-get($iz-breakpoints, $name))} {
            @content;
        }
    // If the key doesn't exist in the map
    } @else {
        @warn "No value could be retrieved from `#{$iz-breakpoints}`. "
        + "Please make sure it's defined in the `$iz-breakpoints` map.";
    }
}


// Clearfix
//
// Outputs a simple clearfix.
// ----------------------------------------------------------------------------
%clearfix {
    &::after {
        clear: both;
        content: '';
        display: table;
    }
}


// Hide Text
//
// Hides text effectively, avoids painting a block -9999px off-screen.
// ----------------------------------------------------------------------------
%hide-text {
    overflow: hidden;
    text-indent: 101%; // bump value if content is drawn in viewport
    white-space: nowrap;
}


// Vertical Align
//
// Vertically align any element.
// Note: use `transform-style: preserve-3d` on the container element to prevent
// blurry edges caused by half-pixels.
// ----------------------------------------------------------------------------
%vertical-align {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}

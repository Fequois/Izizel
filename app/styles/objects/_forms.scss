// Textual form controls
.form-control {
    // Make inputs at least the height of their button counterpart
    // (base line-height + padding + border)
    background-color: $input-bg;
    background-image: none;
    border: $border-width solid $input-border;
    border-radius: $input-border-radius;
    color: $input-color;
    display: block;
    font-size: $font-size-base;
    line-height: $line-height;
    padding: $input-padding-y $input-padding-x;
    transition: border-color ease-in-out .15s;
    width: 100%;

    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand {
        background-color: transparent;
        border: 0;
    }

    // Customize the `:focus` state to imitate native WebKit styles.
    &:focus {
        border-color: $input-border-focus;
        outline: none;
    }

    // Placeholder
    &::placeholder {
        color: $input-color-placeholder;
        // Override Firefox's unusual default opacity.
        opacity: 1;
    }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty,
    // we don't honor that edge case; we style them as disabled anyway.
    &:disabled,
    &[readonly] {
        background-color: $input-bg-disabled;
        // iOS fix for unreadable disabled content.
        opacity: 1;
    }

    &:disabled {
        cursor: $cursor-disabled;
    }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
    display: block;
}


// Labels
//
// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.form-control-label {
    // Override the `<label>` default
    margin-bottom: 0;
    padding: ($input-padding-y + $border-width) $input-padding-x;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
@media screen and (-webkit-min-device-pixel-ratio: 0) {
    input[type="date"],
    input[type="time"],
    input[type="datetime-local"],
    input[type="month"] {
        &.form-control {
            line-height: $input-height;
        }

        &.input-sm,
        .input-group-sm &.form-control {
            line-height: $input-height-sm;
        }

        &.input-lg,
        .input-group-lg &.form-control {
            line-height: $input-height-lg;
        }
    }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
.form-control-sm {
    border-radius: $input-border-radius-sm;
    font-size: $font-size-sm;
    line-height: $line-height-sm;
    padding: $input-padding-y-sm $input-padding-x-sm;
}

.form-control-lg {
    border-radius: $input-border-radius-lg;
    font-size: $font-size-lg;
    line-height: $line-height-lg;
    padding: $input-padding-y-lg $input-padding-x-lg;
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
    margin-bottom: $form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
    display: block;
    margin-bottom: ($spacer * .75);
    position: relative;

    label {
        cursor: pointer;
        font-weight: normal;
        margin-bottom: 0;
        padding-left: 1.25rem;

        // When there's no labels, don't position the input.
        input:only-child {
            position: static;
        }
    }
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    margin-left: -1.25rem;
    margin-top: .25rem;
    position: absolute;
}

.radio + .radio,
.checkbox + .checkbox {
    margin-top: -.25rem;
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
    cursor: pointer;
    display: inline-block;
    font-weight: normal;
    margin-bottom: 0;
    padding-left: 1.25rem;
    position: relative;
    vertical-align: middle;
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
    margin-left: .75rem;
    margin-top: 0;
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.
.form-control-success,
.form-control-warning,
.form-control-error {
    background-position: center right ($input-height * .25);
    background-repeat: no-repeat;
    background-size: ($input-height * .65) ($input-height * .65);
    padding-right: ($input-padding-x * 3);
}

// Form validation states
.has-success {
    @include form-control-validation($brand-success);

    .form-control-success {
        background-image: url($form-icon-success);
    }
}

.has-warning {
    @include form-control-validation($brand-warning);

    .form-control-warning {
        background-image: url($form-icon-warning);
    }
}

.has-error {
    @include form-control-validation($brand-danger);

    .form-control-error {
        background-image: url($form-icon-error);
    }
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach 768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
.form-inline {
    // Kick in the inline
    @include mq(medium) {
        // Inline-block all the things for "inline"
        .form-group {
            display: inline-block;
            margin-bottom: 0;
            vertical-align: middle;
        }

        // In navbar-form, allow folks to *not* use `.form-group`
        .form-control {
            display: inline-block;
            vertical-align: middle;
            // Prevent labels from stacking above inputs in `.form-group`
            width: auto;
        }

        // Make static controls behave like regular ones
        .form-control-static {
            display: inline-block;
        }

        .input-group {
            display: inline-table;
            vertical-align: middle;

            .input-group-addon,
            .input-group-btn,
            .form-control {
                width: auto;
            }
        }

        // Input groups need that 100% width though
        .input-group > .form-control {
            width: 100%;
        }

        .form-control-label {
            margin-bottom: 0;
            vertical-align: middle;
        }

        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match.
        .radio,
        .checkbox {
            display: inline-block;
            margin-bottom: 0;
            margin-top: 0;
            vertical-align: middle;

            label {
                padding-left: 0;
            }
        }

        .radio input[type="radio"],
        .checkbox input[type="checkbox"] {
            margin-left: 0;
            position: relative;
        }

        // Re-override the feedback icon.
        .has-feedback .form-control-feedback {
            top: 0;
        }
    }
}
